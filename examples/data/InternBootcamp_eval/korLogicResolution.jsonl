{"data_source": "KorLogicResolution", "prompt": "If C1 = p and C2 = ¬p ∨ ¬s ∨ ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p"], "C2": ["¬p", "¬s", "¬r"], "expected": "¬s ∨ ¬r"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ p and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "p"], "C2": ["¬r"], "expected": "p"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = q and C2 = s ∨ ¬s be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["q"], "C2": ["s", "¬s"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = s ∨ ¬p ∨ r and C2 = ¬s ∨ ¬p ∨ r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["s", "¬p", "r"], "C2": ["¬s", "¬p", "r"], "expected": "¬p ∨ r"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q ∨ p and C2 = ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q", "p"], "C2": ["¬q"], "expected": "p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = s and C2 = ¬s ∨ ¬r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["s"], "C2": ["¬s", "¬r"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p ∨ r ∨ ¬r)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p", "r", "¬r"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬p ∨ q and C2 = ¬r ∨ p ∨ ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬p", "q"], "C2": ["¬r", "p", "¬q"], "expected": "p ∨ ¬p ∨ q ∨ ¬q"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (s)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["s"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r"], "C2": ["¬r"], "expected": "0"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ p ∨ ¬p and C2 = ¬r ∨ ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "p", "¬p"], "C2": ["¬r", "¬p"], "expected": "p ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q ∨ p ∨ ¬s and C2 = ¬q ∨ s ∨ ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q", "p", "¬s"], "C2": ["¬q", "s", "¬p"], "expected": "p ∨ ¬s ∨ s ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ s and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "s"], "C2": ["¬r"], "expected": "s"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r"], "C2": ["¬r"], "expected": "0"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = ¬p and C2 = r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["¬p"], "C2": ["r"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = p ∨ ¬q and C2 = ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p", "¬q"], "C2": ["¬p"], "expected": "¬q"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬s and C2 = ¬r ∨ ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬s"], "C2": ["¬r", "¬p"], "expected": "¬s ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = p ∨ ¬q and C2 = s ∨ ¬q ∨ ¬r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["p", "¬q"], "C2": ["s", "¬q", "¬r"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = q ∨ s and C2 = ¬q be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["q", "s"], "C2": ["¬q"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = s ∨ q and C2 = ¬s ∨ p be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["s", "q"], "C2": ["¬s", "p"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = s ∨ p and C2 = ¬s, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["s", "p"], "C2": ["¬s"], "expected": "p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = s and C2 = ¬q be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["s"], "C2": ["¬q"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q ∨ ¬s ∨ ¬r and C2 = ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q", "¬s", "¬r"], "C2": ["¬q"], "expected": "¬s ∨ ¬r"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p ∨ ¬s ∨ ¬q)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p", "¬s", "¬q"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = ¬s ∨ q and C2 = q be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["¬s", "q"], "C2": ["q"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = r ∨ s and C2 = ¬r ∨ p ∨ q be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["r", "s"], "C2": ["¬r", "p", "q"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬s and C2 = ¬r ∨ ¬s ∨ ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬s"], "C2": ["¬r", "¬s", "¬p"], "expected": "¬s ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = r ∨ s ∨ ¬q and C2 = ¬r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["r", "s", "¬q"], "C2": ["¬r"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬p and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬p"], "C2": ["¬r"], "expected": "¬p"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q ∨ p and C2 = ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q", "p"], "C2": ["¬q"], "expected": "p"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = s and C2 = ¬s ∨ ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["s"], "C2": ["¬s", "¬r"], "expected": "¬r"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q and C2 = ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q"], "C2": ["¬q"], "expected": "0"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ s ∨ ¬q and C2 = ¬r, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "s", "¬q"], "C2": ["¬r"], "expected": "s ∨ ¬q"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬s ∨ ¬p and C2 = ¬r ∨ p ∨ ¬s, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬s", "¬p"], "C2": ["¬r", "p", "¬s"], "expected": "p ∨ ¬s ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["¬p"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = p ∨ q and C2 = ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p", "q"], "C2": ["¬p"], "expected": "q"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q and C2 = ¬q ∨ p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q"], "C2": ["¬q", "p"], "expected": "p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = q ∨ ¬r and C2 = p ∨ ¬r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["q", "¬r"], "C2": ["p", "¬r"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = ¬s and C2 = p ∨ ¬p be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["¬s"], "C2": ["p", "¬p"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ p ∨ ¬p and C2 = ¬r ∨ ¬s, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "p", "¬p"], "C2": ["¬r", "¬s"], "expected": "p ∨ ¬s ∨ ¬p"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = q and C2 = ¬q ∨ ¬p ∨ ¬r be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["q"], "C2": ["¬q", "¬p", "¬r"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (r ∨ ¬r)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["r", "¬r"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (¬q ∨ ¬r)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["¬q", "¬r"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = r and C2 = p ∨ ¬p ∨ s be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["r"], "C2": ["p", "¬p", "s"], "expected": false}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = p ∨ s ∨ ¬q and C2 = ¬p ∨ q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p", "s", "¬q"], "C2": ["¬p", "q"], "expected": "s ∨ q ∨ ¬q"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = p ∨ r and C2 = ¬p ∨ q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p", "r"], "C2": ["¬p", "q"], "expected": "q ∨ r"}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = p ∨ s and C2 = ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["p", "s"], "C2": ["¬p"], "expected": "s"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r ∨ ¬p and C2 = ¬r ∨ ¬p, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r", "¬p"], "C2": ["¬r", "¬p"], "expected": "¬p"}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = q and C2 = ¬q, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["q"], "C2": ["¬q"], "expected": "0"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = s and C2 = ¬s be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["s"], "C2": ["¬s"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "If C1 = r and C2 = ¬r ∨ ¬s, what is dispel(C1, C2)?\nProvide answer in format [[result]].\nFor multiple results use [[result1;result2]].\nFor empty clause write [[0]].", "ground_truth": {"problem_type": "compute_dispel", "C1": ["r"], "C2": ["¬r", "¬s"], "expected": "¬s"}}
{"data_source": "KorLogicResolution", "prompt": "Can clauses C1 = q and C2 = ¬q be resolved?\nA. Yes\nB. No\nAnswer format: [[option]].", "ground_truth": {"problem_type": "can_resolve", "C1": ["q"], "C2": ["¬q"], "expected": true}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (s ∨ ¬q)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["s", "¬q"]], "expected_output": "Plausible", "steps": 1}}
{"data_source": "KorLogicResolution", "prompt": "Apply resolution algorithm to: (p) ∧ (¬p)\nWhat is the output (Plausible/Implausible) and cycle count?\nAnswer format: [[output];[number]].", "ground_truth": {"problem_type": "algorithm_output", "cnf": [["p"], ["¬p"]], "expected_output": "Implausible", "steps": 1}}
