{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p > p) & (p | r)) | ((r & p) & (q & q))) and (((p ! p) & (p | r)) | ((r & p) & (q & q))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p > p) & (p | r)) | ((r & p) & (q & q)))", "(((p ! p) & (p | r)) | ((r & p) & (q & q)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((r & q) & (q = r)) & ((p > q) = (p > q))) using rule 10.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((r & q) & (q = r)) & ((p > q) = (p > q)))", "target_rule": 10}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((r & q) > (r | p)) = ((q = p) = (q > p))) using rule 10.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((r & q) > (r | p)) = ((q = p) = (q > p)))", "target_rule": 10}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((p | q) = (q | r)) and p | q = q | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((p | q) = (q | r))", "p | q = q | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((r = q) & (p & r)) and r = q & p & r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((r = q) & (p & r))", "r = q & p & r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((r & q) = (r | p)) | ((r > p) & (q & q))) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((r & q) = (r | p)) | ((r > p) & (q & q)))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p | r) > (q & p)) & ((p & p) & (p | r))) and p | r > q & p & p & p & p | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p | r) > (q & p)) & ((p & p) & (p | r)))", "p | r > q & p & p & p & p | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((q = r) = (r | r)) | ((r > q) > (p = r))) and (((q & r) & (r | r)) | ((r ! q) ! (p & r))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((q = r) = (r | r)) | ((r > q) > (p = r)))", "(((q & r) & (r | r)) | ((r ! q) ! (p & r)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((p > p) & (r | r)) and ((p ! p) & (r | r)) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((p > p) & (r | r))", "((p ! p) & (r | r))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((r | q) & (q & r)) and r | q & q & r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((r | q) & (q & r))", "r | q & q & r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((r > q) | (q > p)) & ((p | q) | (p > q))) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((r > q) | (q > p)) & ((p | q) | (p > q)))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p | r) | (r | r)) & ((q = q) = (q | p))) and p | r | r | r & q = q = q | p equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p | r) | (r | r)) & ((q = q) = (q | p)))", "p | r | r | r & q = q = q | p"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((q > r) > (p | r)) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((q > r) > (p | r))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((q | q) & (q | p)) & ((q > r) = (q | r))) and q | q & q | p & q > r = q | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((q | q) & (q | p)) & ((q > r) = (q | r)))", "q | q & q | p & q > r = q | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p | r) | (r | r)) | ((r & q) | (p | r))) and p | r | r | r | r & q | p | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p | r) | (r | r)) | ((r & q) | (p | r)))", "p | r | r | r | r & q | p | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((p > q) & (q | q)) = ((r > p) & (p = r))) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((p > q) & (q | q)) = ((r > p) & (p = r)))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Hangzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((p | p) & (p | r)) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((p | p) & (p | r))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Hangzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((p = q) & (p & r)) > ((p > r) | (p & p))) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((p = q) & (p & r)) > ((p > r) | (p & p)))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((p | q) > (q & r)) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((p | q) > (q & r))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Hangzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p > p) & (p = r)) & ((q = r) & (q & q))) and (((p ! p) & (p & r)) & ((q & r) & (q & q))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p > p) & (p = r)) & ((q = r) & (q & q)))", "(((p ! p) & (p & r)) & ((q & r) & (q & q)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((q = r) & (r = p)) | ((q | q) | (p & p))) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((q = r) & (r = p)) | ((q | q) | (p & p)))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Suzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((r & p) & (p | r)) and r & p & p | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((r & p) & (p | r))", "r & p & p | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p & p) > (r > r)) > ((p | q) = (p | r))) and (((p & p) ! (r ! r)) ! ((p | q) & (p | r))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p & p) > (r > r)) > ((p | q) = (p | r)))", "(((p & p) ! (r ! r)) ! ((p | q) & (p | r)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((p | q) > (q | q)) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((p | q) > (q | q))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((q = p) | (r | r)) and q = p | r | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((q = p) | (r | r))", "q = p | r | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Suzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p > q) & (r > q)) = ((r > p) > (q & r))) and (((p ! q) & (r ! q)) & ((r ! p) ! (q & r))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p > q) & (r > q)) = ((r > p) > (q & r)))", "(((p ! q) & (r ! q)) & ((r ! p) ! (q & r)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((r = p) > (r > r)) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((r = p) > (r > r))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((q & q) > (p | r)) | ((q = r) & (p & q))) and (((q & q) ! (p | r)) | ((q & r) & (p & q))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((q & q) > (p | r)) | ((q = r) & (p & q)))", "(((q & q) ! (p | r)) | ((q & r) & (p & q)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((q & q) & (q > r)) and q & q & q > r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((q & q) & (q > r))", "q & q & q > r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Suzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((r | q) & (r & p)) and ((r | q) & (r & p)) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((r | q) & (r & p))", "((r | q) & (r & p))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Suzhou", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression (((p & p) & (r | p)) > ((r > r) | (q | r))) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "(((p & p) & (r | p)) > ((r > r) | (q | r)))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((p & q) = (r > r)) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((p & q) = (r > r))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p = r) > (p | p)) > ((p = q) | (p & q))) and p = r > p | p > p = q | p & q equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p = r) > (p | p)) > ((p = q) | (p & q)))", "p = r > p | p > p = q | p & q"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((r = q) = (r & q)) and ((r & q) & (r & q)) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((r = q) = (r & q))", "((r & q) & (r & q))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((p = q) & (q = p)) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((p = q) & (q = p))", "target_rule": 12}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((q | p) & (r > q)) and q | p & r > q equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((q | p) & (r > q))", "q | p & r > q"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((r > r) = (r & p)) using rule 14.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((r > r) = (r & p))", "target_rule": 14}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p | p) = (q & q)) | ((r | r) > (r & r))) and (((p | p) & (q & q)) | ((r | r) ! (r & r))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p | p) = (q & q)) | ((r | r) > (r & r)))", "(((p | p) & (q & q)) | ((r | r) ! (r & r)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((q = r) | (p > r)) and q = r | p > r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((q = r) | (p > r))", "q = r | p > r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((r > r) | (p & q)) using rule 10.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((r > r) | (p & q))", "target_rule": 10}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((p | q) | (r | r)) and p | q | r | r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((p | q) | (r | r))", "p | q | r | r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((p | q) = (q & r)) = ((r & r) & (q > p))) and (((p | q) & (q & r)) & ((r & r) & (q ! p))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((p | q) = (q & r)) = ((r & r) & (q > p)))", "(((p | q) & (q & r)) & ((r & r) & (q ! p)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are ((q | q) = (p & r)) and q | q = p & r equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["((q | q) = (p & r))", "q | q = p & r"], "expected": false}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Are (((q & r) = (r | p)) > ((p | p) & (p & q))) and (((q & r) & (r | p)) ! ((p | p) & (p & q))) equivalent?\nFormat answer as [[A]] for Yes or [[B]] for No", "ground_truth": {"type": "equivalence_validation", "pairs": ["(((q & r) = (r | p)) > ((p | p) & (p & q)))", "(((q & r) & (r | p)) ! ((p | p) & (p & q)))"], "expected": true}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Professor Wang is from Suzhou, Shanghai, or Hangzhou.\nThree people made statements. Determine who was completely correct.\nFormat answer as [[City];[Person]]", "ground_truth": {"type": "puzzle_solution", "city": "Shanghai", "params": {"p": "Suzhou", "q": "Shanghai", "r": "Hangzhou"}}}
{"data_source": "KorLogicEquivalenceCalculus", "prompt": "Convert the expression ((q = p) > (r = q)) using rule 12.\nFormat answer as [[converted_expression]]", "ground_truth": {"type": "expression_conversion", "expression": "((q = p) > (r = q))", "target_rule": 12}}
